name: Comprehensive Integration Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual trigger
  schedule:
    - cron: "17 2 * * *"  # 02:17 UTC daily for nightly re-verification

jobs:
  # Job 1: Core Operations Tests
  core-operations:
    name: Core Operations Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build MerkleKV server
        run: |
          cargo build --release
          echo "Server binary info:"
          ls -lh target/release/
          file target/release/merkle* || echo "Binary not found with expected name"

      - name: Install Python dependencies
        run: |
          cd tests/integration
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate test coverage
        run: |
          cd tests/integration
          python validate_test_coverage.py

      - name: Run Basic Operations Tests
        run: |
          cd tests/integration
          python -m pytest test_basic_operations.py -v --tb=short --junitxml=basic_operations_results.xml
        env:
          RUST_LOG: info
          RUST_BACKTRACE: 1

      - name: Run SCAN Command Tests       
        run: |
          cd tests/integration
          python -m pytest test_scan_tcp.py -v --tb=short --junitxml=scan_results.xml
          
      - name: Run Numeric Operations Tests
        run: |
          cd tests/integration
          python -m pytest test_numeric_operations.py -v --tb=short --junitxml=numeric_operations_results.xml
        env:
          RUST_LOG: info

      - name: Run Bulk Operations Tests
        run: |
          cd tests/integration
          python -m pytest test_bulk_operations.py test_bulk_ops_manual.py test_mget_fix.py -v --tb=short --junitxml=bulk_operations_results.xml
        env:
          RUST_LOG: info

      - name: Run Storage Persistence Tests
        run: |
          cd tests/integration
          python -m pytest test_storage_persistence.py -v --tb=short --junitxml=storage_persistence_results.xml
        env:
          RUST_LOG: info

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: core-operations-results
          path: |
            tests/integration/*_results.xml
          retention-days: 7

  # Job 2: Advanced Features Tests  
  advanced-features:
    name: Advanced Features Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build MerkleKV server
        run: cargo build --release

      - name: Install Python dependencies
        run: |
          cd tests/integration
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Concurrency Tests
        run: |
          cd tests/integration
          python -m pytest test_concurrency.py -v --tb=short --junitxml=concurrency_results.xml
        env:
          RUST_LOG: info

      - name: Run Statistical Commands Tests
        run: |
          cd tests/integration
          python -m pytest test_statistical_commands.py -v --tb=short --junitxml=stats_results.xml
        env:
          RUST_LOG: info

      - name: Run Error Handling Tests
        run: |
          cd tests/integration
          python -m pytest test_error_handling.py -v --tb=short --junitxml=error_handling_results.xml
        env:
          RUST_LOG: info

      - name: Run Simple Server Tests
        run: |
          cd tests/integration
          python -m pytest test_simple_server.py -v --tb=short --junitxml=simple_server_results.xml
        env:
          RUST_LOG: info

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: advanced-features-results
          path: |
            tests/integration/*_results.xml
          retention-days: 7

  # Job 3: Replication Tests
  replication-tests:
    name: Replication Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build MerkleKV server
        run: cargo build --release

      - name: Install Python dependencies
        run: |
          cd tests/integration
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test MQTT Connectivity
        run: |
          cd tests/integration
          python run_replication_tests.py connectivity
        env:
          RUST_LOG: info

      - name: Run Simple Replication Tests
        run: |
          cd tests/integration
          python run_replication_tests.py simple
        env:
          RUST_LOG: info

      - name: Run Full Replication Tests
        run: |
          cd tests/integration
          python -m pytest test_replication.py -v --tb=short --junitxml=replication_results.xml
        env:
          RUST_LOG: info

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: replication-results
          path: |
            tests/integration/*_results.xml
            tests/integration/test_report.txt
          retention-days: 7

  # Job 4: Performance & Benchmarks
  performance-tests:
    name: Performance & Benchmarks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build MerkleKV server (optimized)
        run: cargo build --release

      - name: Install Python dependencies
        run: |
          cd tests/integration
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Benchmark Tests
        run: |
          cd tests/integration
          python -m pytest test_benchmark.py -v --tb=short --junitxml=benchmark_results.xml
        env:
          RUST_LOG: warn  # Less verbose for performance tests

      - name: Generate Performance Report
        run: |
          cd tests/integration
          echo "=== PERFORMANCE TEST SUMMARY ===" > performance_report.txt
          echo "Date: $(date)" >> performance_report.txt
          echo "Commit: ${{ github.sha }}" >> performance_report.txt
          echo "" >> performance_report.txt
          echo "Test results:" >> performance_report.txt
          cat benchmark_results.xml | grep -o 'tests="[0-9]*"' || echo "No test count found" >> performance_report.txt

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            tests/integration/benchmark_results.xml
            tests/integration/performance_report.txt
            tests/integration/.benchmarks/
          retention-days: 30

  # Job 5: Slow/Optional Tests (run on schedule or manual dispatch)
  tests-slow:
    name: Slow/Optional Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build MerkleKV server
        run: cargo build --release

      - name: Install Python dependencies
        run: |
          cd tests/integration
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Slow Integration Tests
        run: |
          cd tests/integration
          python -m pytest -m "slow" -v --tb=short --junitxml=slow_tests_results.xml
        env:
          RUST_LOG: info

      - name: Upload slow test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: slow-tests-results
          path: |
            tests/integration/slow_tests_results.xml
          retention-days: 7

  # Job 6: Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [core-operations, advanced-features, replication-tests, performance-tests]
    if: always()

    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results

      - name: Generate Test Summary
        run: |
          echo "# 🧪 MerkleKV Test Summary" > test_summary.md
          echo "" >> test_summary.md
          echo "**Workflow:** ${{ github.workflow }}" >> test_summary.md
          echo "**Commit:** ${{ github.sha }}" >> test_summary.md
          echo "**Date:** $(date)" >> test_summary.md
          echo "" >> test_summary.md
          
          echo "## Test Job Results" >> test_summary.md
          echo "" >> test_summary.md
          
          # Check each job status
          echo "| Job | Status |" >> test_summary.md
          echo "|-----|--------|" >> test_summary.md
          echo "| Core Operations | ${{ needs.core-operations.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> test_summary.md
          echo "| Advanced Features | ${{ needs.advanced-features.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> test_summary.md
          echo "| Replication Tests | ${{ needs.replication-tests.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> test_summary.md
          echo "| Performance Tests | ${{ needs.performance-tests.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> test_summary.md
          echo "" >> test_summary.md
          
          # List test artifacts
          echo "## Test Artifacts" >> test_summary.md
          echo "" >> test_summary.md
          find test-results -name "*.xml" -o -name "*.txt" | head -20 | while read file; do
            echo "- $(basename "$file")" >> test_summary.md
          done

      - name: Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test_summary.md
          retention-days: 30

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test_summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Upload logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: failure-logs
          path: |
            *.log
            target/release/*.log
            /tmp/config_*.toml
          retention-days: 7
